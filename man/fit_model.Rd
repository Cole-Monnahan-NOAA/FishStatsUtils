% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_model.R
\name{fit_model}
\alias{fit_model}
\title{Fit VAST to data}
\usage{
fit_model(settings, Lat_i, Lon_i, t_iz, b_i, a_i, c_iz = rep(0,
  length(b_i)), v_i = rep(0, length(b_i)),
  working_dir = paste0(getwd(), "/"), Xconfig_zcp = NULL,
  covariate_data, formula = ~0, Q_ik = NULL, newtonsteps = 1,
  silent = TRUE, build_model = TRUE, run_model = TRUE,
  test_fit = TRUE, ...)
}
\arguments{
\item{settings}{Output from \code{make_settings}}

\item{Lat_i}{Latitude for each sample}

\item{Lon_i}{Longitude for each sample}

\item{t_iz}{Matrix where each row species the time for each observation i (if t_iz is a vector, it is coerced to a matrix with one column; if it is a matrix with two or more columns, it specifies multiple times for each observation, e.g., both year and season)}

\item{b_i}{Sampled biomass for each observation i}

\item{a_i}{Sampled area for each observation i}

\item{c_iz}{Category (e.g., species, length-bin) for each observation i}

\item{v_i}{sampling category (e.g., vessel or tow) associated with overdispersed variation for each observation i (by default \code{v_i=0} for all samples, which will not affect things given the default values for \code{OverdispersionConfig})}

\item{Xconfig_zcp}{OPTIONAL, 3D array of settings for each dynamic density covariate, where the first dimension corresponds to 1st or 2nd linear predictors, second dimension corresponds to model category, and third dimension corresponds to each density covariate
\describe{
  \item{Xconfig_zcp[z,c,p]=0}{\code{X_itp[,,p]} has no effect on linear predictor z for category c}
  \item{Xconfig_zcp[z,c,p]=1}{\code{X_itp[,,p]} has a linear effect on linear predictor z for category c}
  \item{Xconfig_zcp[z,c,p]=2}{\code{X_itp[,,p]} has a spatially varying, zero-centered linear effect on linear predictor z for category c}
  \item{Xconfig_zcp[z,c,p]=3}{\code{X_itp[,,p]} has a spatially varying linear effect on linear predictor z for category c}
}}

\item{covariate_data}{data frame of covariate values with columns \code{Lat}, \code{Lon}, and \code{Year}, and other columns matching names in \code{formula}; \code{Year=NA} can be used for covariates that do not change among years (e.g., depth)}

\item{formula}{an object of class "formula" (or one that can be coerced to that class): a symbolic description of the model to be fitted. Similar specification to \code{\link{stats::lm}}}

\item{Q_ik}{matrix of catchability covariates (e.g., measured variables affecting catch rates but not caused by variation in species density) for each observation i}

\item{newtonsteps}{number of extra newton steps to take after optimization (alternative to \code{loopnum})}

\item{build_model}{Boolean indicating whether to build the model, \code{build_model=TRUE}, or simply build the inputs, \code{build_model=FALSE}}

\item{run_model}{Boolean indicating whether to run the model or simply return the inputs and built TMB object}

\item{test_fit}{Boolean indicating whether to apply \code{VAST::check_fit} before calculating standard errors, to test for parameters hitting bounds etc; defaults to TRUE}

\item{...}{additional arguments to pass to \code{FishStatsUtils::make_extrapolation_info}, \code{FishStatsUtils::make_spatial_info}, \code{VAST::make_data}, \code{VAST::make_model}, or \code{TMBhelper::fit_tmb}, where arguments are matched by name against each function.  If an argument doesn't match, it is still passed to \code{VAST::make_data}}
}
\value{
Object of class \code{fit_model}, containing formatted inputs and outputs from VAST
\describe{
  \item{parameter_estimates}{Output from \code{\link[TMBhelper]{fit_tmb}}; see that documentation for definition of contents}
  \item{extrapolation_list}{Output from \code{\link{make_extrapolation_info}}; see that documentation for definition of contents}
  \item{spatial_list}{Output from \code{\link{make_spatial_info}}; see that documentation for definition of contents}
  \item{data_list}{Output from \code{\link[VAST]{make_data}}; see that documentation for definition of contents}
  \item{tmb_list}{Output from \code{\link[VAST]{make_model}}; see that documentation for definition of contents}
  \item{ParHat}{Tagged list of maximum likelihood estimatesion of fixed effects and empirical Bayes estimates of random effects, following format of initial values generated by \code{\link[VAST]{make_parameters}}; see that documentation for definition of contents}
  \item{Report}{Tagged list of VAST outputs; Density estimates \code{fit$Report$D_gcy} correspond to grid cells \code{g} at locations \code{fit$extrapolation_list$Data_Extrap[which(fit$extrapolation_list[["Area_km2_x"]]>0&rowSums(fit$extrapolation_list[["a_el"]])>0),c('Lat','Lon')]} for each variable \code{c} and year \code{y}}
}
}
\description{
\code{fit_model} fits a spatio-temporal model to data
}
\details{
This function is the user-interface for the multiple mid-level functions that
determine the extrapolation-grid \code{\link{make_extrapolation_info}},
define spatial objects \code{\link{make_spatial_info}},
build covariates from a formula interface \code{\link{make_covariates}},
assemble data \code{\link{make_data}},
build model \code{\link{make_model}},
estimate parameters \code{\link[TMBhelper]{fit_tmb}},
and check for obvious problems with the estimates \code{\link{check_fit}}.
Please see reference documetation for each of those functions (e.g., \code{?make_extrapolation_info}) to see a list of arguments used by each mid-level function.

Specifically, the mid-level functions called by \code{fit_model(.)} look for arguments in the following order of precedence (from highest to lowest precedence):
(1) First, \code{fit_model(.)} prioritizes using named arguments passed directly to \code{fit_model(.)}. If arguments are passed this way, they are used instead of other options below.
(2) Second, if an argument is not passed supplied directly to \code{fit_model(.)}, then \code{fit_model(.)} looks for elements in input \code{settings}, as typically created by \code{\link{make_settings}}.
(3) Third, if an argument is not supplied via (1) or (2) above, then each mid-level function uses default values defined in those function arguments, e.g., see \code{args(make_extrapolation_info)} for defaults for function \code{make_extrapolation_info(.)}
Collectively, this order of precedence allows users to specify inputs for a specific project via input method (1), the package author to change defaults through changes in the settings
defined for a given purpose in \code{make_settings(.)} via input method (2), while still defaulting to package defaults via option (3).
}
\examples{
\dontrun{
# Load packages
library(TMB)
library(VAST)

# load data set
# see `?load_example` for list of stocks with example data
# that are installed automatically with `FishStatsUtils`.
example = load_example( data_set="EBS_pollock" )

# Make settings
settings = make_settings( n_x=50, Region=example$Region, purpose="index",
  strata.limits=example$strata.limits )

# Run model
fit = fit_model( "settings"=settings, "Lat_i"=example$sampling_data[,'Lat'],
  "Lon_i"=example$sampling_data[,'Lon'], "t_i"=example$sampling_data[,'Year'],
  "c_i"=rep(0,nrow(example$sampling_data)), "b_i"=example$sampling_data[,'Catch_KG'],
  "a_i"=example$sampling_data[,'AreaSwept_km2'], "v_i"=example$sampling_data[,'Vessel'] )

# Plot results
plot_results( settings=settings, fit=fit )
}

}
\seealso{
\code{?VAST} for general documentation, \code{?make_settings} for generic settings, \code{?fit_model} for model fitting, and \code{?plot_results} for generic plots

Other wrapper functions: \code{\link{make_settings}},
  \code{\link{plot_results}}
}
\concept{wrapper functions}
